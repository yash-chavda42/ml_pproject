# -*- coding: utf-8 -*-
"""Decision_tree_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kx3sAFcwVC7a_LGtVu8U-n65oYBIy0Ez
"""

import numpy as np 
import matplotlib.pyplot as plt
import glob
import cv2
import pandas as pd
import plotly.express as px
from sklearn.metrics import f1_score
from google.colab.patches import cv2_imshow
from sklearn.tree import DecisionTreeClassifier

from google.colab import drive

drive.mount('/content/drive')

cd /content/drive/"MyDrive/dataset_ml/Train_set"

dataset = pd.read_csv('train.csv')
dataset.shape

dataset

dataset.describe

data=dataset.values[:7095,0:2]#5000 image for train
print(data.shape)
data

image=[]
classes=[]
for i in range(1000):
  img=cv2.imread(data[i][0])#read 5000 setof image
  img2=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  image.append(img2)#append all the image in imge
  classes.append(data[i][1])#append all the class in classes

#px.imshow(img2,binary_string=True)
print(type(image))
print(type(classes))
image=np.array(image)
classes=np.array(classes)
print(type(image))
print(type(classes))
image

classes

classes.shape

from sklearn.model_selection import train_test_split
x_trainset, x_testset, y_trainset, y_testset = train_test_split(image,classes, test_size=0.3, random_state=3)

#traing set
print('Shape of X training set {}'.format(x_trainset.shape),'&',' Size of Y training set {}'.format(y_trainset.shape))

#test set
print('Shape of X training set {}'.format(x_testset.shape),'&',' Size of Y training set {}'.format(y_testset.shape))

imageTree = DecisionTreeClassifier(criterion="entropy", max_depth = 6)
imageTree # it shows the default parameters

nsamples, nx, ny = x_trainset.shape
new_x_train = x_trainset.reshape((nsamples,nx*ny))

nsamples1, nx1, ny1 = x_testset.shape
new_x_test = x_testset.reshape((nsamples1,nx1*ny1))

imageTree.fit(new_x_train,y_trainset)
pred_class = imageTree.predict(new_x_test)

print(y_testset)
print(pred_class)

#depth at 4 ->0.69
#depth at 10 ->0.63
#depth at 3 ->0.65
#depth at 5 ->0.68
#depth at 6 ->0.66
from sklearn import metrics
import matplotlib.pyplot as plt
print("DecisionTrees's Accuracy: ", metrics.accuracy_score(y_testset, pred_class))







