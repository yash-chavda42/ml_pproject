# -*- coding: utf-8 -*-
"""Knn_IBM_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l1eoPyi96ttbSaSUZ16m0GdwoAI35k3G
"""

import numpy as np 
import matplotlib.pyplot as plt
import glob
import cv2
import pandas as pd
import plotly.express as px
from sklearn.metrics import f1_score
from google.colab.patches import cv2_imshow

from google.colab import drive

drive.mount('/content/drive')

cd /content/drive/"MyDrive/dataset_ml/Train_set"

dataset = pd.read_csv('train.csv')
dataset.shape

dataset

dataset.describe

data=dataset.values[:7095,0:2]#5000 image for train
print(data.shape)
data

image=[]
classes=[]
for i in range(1000):
  img=cv2.imread(data[i][0])#read 5000 setof image
  img2=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  image.append(img2)#append all the image in imge
  classes.append(data[i][1])#append all the class in classes

#px.imshow(img2,binary_string=True)
print(type(image))
print(type(classes))
image=np.array(image)
classes=np.array(classes)
print(type(image))
print(type(classes))
image

print(image.shape)

classes

nsamples, nx, ny = image.shape
new_image_train = image.reshape((nsamples,nx*ny))

print(image.shape)
print(new_image_train.shape)

#Normalize Data
from sklearn import preprocessing
image = preprocessing.StandardScaler().fit(new_image_train).transform(new_image_train.astype(float))
image[0:5]

#split data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(image, classes, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

X_test

#Classifier implementing the k-nearest neighbors vote.
from sklearn.neighbors import KNeighborsClassifier

#take k=4
k = 4
#Train Model and Predict  
neigh = KNeighborsClassifier(n_neighbors = k).fit(X_train,y_train)
neigh

yhat = neigh.predict(X_test)
yhat

#accuracy classification score is a function that computes subset accuracy. This function is equal to the jaccard_score function
#accuracy
from sklearn import metrics
print("Train set Accuracy: ", metrics.accuracy_score(y_train, neigh.predict(X_train)))
print("Test set Accuracy: ", metrics.accuracy_score(y_test, yhat))

Ks = 10
mean_acc = np.zeros((Ks-1))
std_acc = np.zeros((Ks-1))

for n in range(1,Ks):
    
    #Train Model and Predict  
    neigh = KNeighborsClassifier(n_neighbors = n).fit(X_train,y_train)
    yhat=neigh.predict(X_test)
    mean_acc[n-1] = metrics.accuracy_score(y_test, yhat)

    
    std_acc[n-1]=np.std(yhat==y_test)/np.sqrt(yhat.shape[0])

print(mean_acc)

plt.plot(range(1,Ks),mean_acc,'g')
plt.fill_between(range(1,Ks),mean_acc - 1 * std_acc,mean_acc + 1 * std_acc, alpha=0.10)
plt.fill_between(range(1,Ks),mean_acc - 3 * std_acc,mean_acc + 3 * std_acc, alpha=0.10,color="green")
plt.legend(('Accuracy ', '+/- 1xstd','+/- 3xstd'))
plt.ylabel('Accuracy ')
plt.xlabel('Number of Neighbors (K)')
plt.tight_layout()
plt.show()

#best accuracy at k =9
print( "The best accuracy was with", mean_acc.max(), "with k=", mean_acc.argmax()+1)

def predict(x_img):
  yhat = neigh.predict(x_img)
  yhat

def predict_image(p_image):  
  pre_img=cv2.imread(p_image)
  pre_img2=cv2.cvtColor(pre_img,cv2.COLOR_BGR2GRAY)
  #predict(pre_img2)
  return predict(pre_img2)

print(data)
print(data.shape)

im=[]
imaage="ff6bfada2.jpg"
pre_img=cv2.imread(imaage)
pre_img2=cv2.cvtColor(pre_img,cv2.COLOR_BGR2GRAY)
im.append(pre_img2)
#img=predict_image(imaage)
print(pre_img2.shape)
arrim = np.array(im)
arrim.shape



image_pre=[]
#classes=[]
#for i in range(1000):
imgpre=cv2.imread("ff6bfada2.jpg")#read 5000 setof image
img2pre=cv2.cvtColor(imgpre,cv2.COLOR_BGR2GRAY)
image_pre.append(img2pre)#append all the image in imge
#classes.append(data[i][1])#append all the class in classes

#px.imshow(img2,binary_string=True)
#print(type(image))
#print(type(classes))
image_pre=np.array(image_pre)
#classes=np.array(classes)
#print(type(image))
#print(type(classes))
image_pre.shape

nsamples, nx, ny = image_pre.shape
new_image_pre = image_pre.reshape((nsamples,nx*ny))

new_image_pre.shape

yhat = neigh.predict(new_image_pre)
yhat

def predict_image(img):
  image_pre=[]
  imgpre=cv2.imread(img)#read 5000 set of image
  img2pre=cv2.cvtColor(imgpre,cv2.COLOR_BGR2GRAY)
  image_pre.append(img2pre)
  image_pre=np.array(image_pre)
  nsamples, nx, ny = image_pre.shape
  new_image_pre = image_pre.reshape((nsamples,nx*ny))
  yhat = neigh.predict(new_image_pre)
  return yhat

imaage="ff6bfada2.jpg"
cl=predict_image(imaage)
print(cl)

#class1
imaage="ff6e35e0a.jpg"
cl=predict_image(imaage)
print(cl)

#class4
imaage="df70a7e07.jpg"
cl=predict_image(imaage)
print(cl)

