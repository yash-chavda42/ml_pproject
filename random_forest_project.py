# -*- coding: utf-8 -*-
"""Random_forest_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dvZZmphBxfvSQBMDZS-iR3M6grlu-qU-
"""

import numpy as np 
import matplotlib.pyplot as plt
import glob
import cv2
import pandas as pd
import plotly.express as px
from sklearn.metrics import f1_score
from google.colab.patches import cv2_imshow

from google.colab import drive

drive.mount('/content/drive')

cd /content/drive/"MyDrive/dataset_ml/Train_set"

dataset = pd.read_csv('train.csv')
dataset.shape

dataset

dataset.describe

data=dataset.values[:7095,0:2]#5000 image for train
print(data.shape)
data

image=[]
classes=[]
for i in range(1000):
  img=cv2.imread(data[i][0])#read 5000 setof image
  img2=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  image.append(img2)#append all the image in imge
  classes.append(data[i][1])#append all the class in classes

#px.imshow(img2,binary_string=True)
print(type(image))
print(type(classes))
image=np.array(image)
classes=np.array(classes)
print(type(image))
print(type(classes))
image

classes

classes.shape

from sklearn.model_selection import train_test_split

train_features,test_features,train_labels,test_labels=train_test_split(image,classes,test_size=0.20)

train_features.shape

test_features.shape

train_features

from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier()

rf

nsamples, nx, ny = train_features.shape
new_train_dataset = train_features.reshape((nsamples,nx*ny))

rf.fit(new_train_dataset,train_labels)

"""for validation data"""

# Predictions on training and validation
pred_train_val = rf.predict(new_train_dataset)

pred_train_val

train_labels

#mean absolute error
errors=abs(pred_train_val-train_labels)
errors

mape=100*(errors/train_labels)
mean_error=np.mean(mape)
mean_error

#accuracy of validation
accuracy=100-mean_error
accuracy

nsamples1, nx1, ny1 = test_features.shape
new_test_dataset = test_features.reshape((nsamples1,nx1*ny1))

# Predictions on training and validation
pred_test_val = rf.predict(new_test_dataset)

pred_test_val

test_labels

#mean absolute error
errors_test=abs(pred_test_val-test_labels)
errors

mape_test=100*(errors_test/test_labels)
mean_error_test=np.mean(mape_test)
mean_error_test

#100 estimator ->69.875
#200 estimator ->70.875
#300 estimator ->71.291
#500 estimator ->71.875 <-by default
#1000 estimator ->71.125
#accuracy of prediction
accuracy_test=100-mean_error_test
accuracy_test

