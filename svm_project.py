# -*- coding: utf-8 -*-
"""Svm_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LLoj_qSMPD2K45agtq8lo422_h3O-10b
"""

import numpy as np 
import matplotlib.pyplot as plt
import glob
import cv2
import pandas as pd
import plotly.express as px
from sklearn.metrics import f1_score
from google.colab.patches import cv2_imshow

from google.colab import drive

drive.mount('/content/drive')

cd /content/drive/"MyDrive/dataset_ml/Train_set"

dataset = pd.read_csv('train.csv')
dataset.shape

dataset

data=dataset.values[:7095,0:2]#5000 image for train
print(data.shape)
data

image=[]
classes=[]
for i in range(1000):
  img=cv2.imread(data[i][0])#read 5000 setof image
  img2=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
  image.append(img2)#append all the image in imge
  classes.append(data[i][1])#append all the class in classes

#px.imshow(img2,binary_string=True)
print(type(image))
print(type(classes))
image=np.array(image)
classes=np.array(classes)
print(type(image))
print(type(classes))
image

classes

#split data
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(image, classes, test_size=0.2, random_state=4)
print ('Train set:', X_train.shape,  y_train.shape)
print ('Test set:', X_test.shape,  y_test.shape)

nsamples, nx, ny = X_train.shape
new_X_train = X_train.reshape((nsamples,nx*ny))

nsamples, nx, ny = X_test.shape
new_X_test = X_test.reshape((nsamples,nx*ny))

from sklearn import svm
clf = svm.SVC(kernel='rbf')
clf.fit(new_X_train, y_train)

yhat = clf.predict(new_X_test)
yhat

from sklearn.metrics import classification_report, confusion_matrix
import itertools

def plot_confusion_matrix(cm, classes,
                          normalize=False,
                          title='Confusion matrix',
                          cmap=plt.cm.Blues):
    """
    This function prints and plots the confusion matrix.
    Normalization can be applied by setting `normalize=True`.
    """
    if normalize:
        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]
        print("Normalized confusion matrix")
    else:
        print('Confusion matrix, without normalization')

    print(cm)

    plt.imshow(cm, interpolation='nearest', cmap=cmap)
    plt.title(title)
    plt.colorbar()
    tick_marks = np.arange(len(classes))
    plt.xticks(tick_marks, classes, rotation=45)
    plt.yticks(tick_marks, classes)

    fmt = '.2f' if normalize else 'd'
    thresh = cm.max() / 2.
    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):
        plt.text(j, i, format(cm[i, j], fmt),
                 horizontalalignment="center",
                 color="white" if cm[i, j] > thresh else "black")

    plt.tight_layout()
    plt.ylabel('True label')
    plt.xlabel('Predicted label')

# Compute confusion matrix
cnf_matrix = confusion_matrix(y_test, yhat, labels=[2,4])
np.set_printoptions(precision=2)

print (classification_report(y_test, yhat))

# Plot non-normalized confusion matrix
plt.figure()
plot_confusion_matrix(cnf_matrix, classes=['Benign(2)','Malignant(4)'],normalize= False,  title='Confusion matrix')

#f1 score
from sklearn.metrics import f1_score
f1_score(y_test, yhat, average='weighted')



